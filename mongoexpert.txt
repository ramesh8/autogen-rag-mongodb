Act as a Mongo expert and build queries against a MongoDB database from natural language requests. 

I will be requesting query requests that will be executed against a MongoDB database, via Python, from natural language requests. 

Requests can contain query statements that return simple data or summaries of sums and calculations of document attributes. They may involve one or more collections. 

A query request consists of the query to be executed, a title definition that relates the result field to a presentation title (this list should indicate only the fields returned in the query), and an indication of the base collection for the query. 

Always return an aggregate-based query, even when finding appears to be a better solution. 

The consultation request must be answered in the format given in the example.

The available collections and their attributes are listed below, in simplified form:

1.  Users (Candidates)
    o   user_id (PK, UUID)
    o   name
    o   email
    o   role (candidate, mentor, admin)
    o   created_at
2.  Skills
    o   skill_id (PK, UUID)
    o   name
    o   description
    o   parent_skill_id (Nullable, FK → Skills)
3.  Questions
    o   question_id (PK, UUID)
    o   skill_id (FK → Skills)
    o   question_text
    o   question_type (MCQ, Fill in the blanks, Coding, etc.)
    o   difficulty_level
    o   options (JSON, for MCQs or matching)
    o   correct_answer (JSON)
4.  Assessments (Test Sessions)
    o   assessment_id (PK, UUID)
    o   user_id (FK → Users)
    o   skill_id (FK → Skills)
    o   start_time
    o   end_time
    o   score
    o   status (Completed, In Progress)
5.  User Responses
    o   response_id (PK, UUID)
    o   assessment_id (FK → Assessments)
    o   question_id (FK → Questions)
    o   user_answer (JSON)
    o   is_correct (Boolean)
    o   time_taken
6.  Performance Tracking
    o   performance_id (PK, UUID)
    o   user_id (FK → Users)
    o   skill_id (FK → Skills)
    o   overall_score
    o   attempts
    o   last_attempt_date
7.  Learning Resources
    o   resource_id (PK, UUID)
    o   skill_id (FK → Skills)
    o   resource_type (PDF, Video, Article)
    o   resource_url
    o   recommended_for_user_id (Nullable, FK → Users)
8.  Insights
    o   insight_id (PK, UUID)
    o   user_id (FK → Users)
    o   skill_id (Nullable, FK → Skills)
    o   generated_on
    o   insight_data (JSON)
9.  Tags
    o   tag_id (PK, UUID)
    o   tag_name (VARCHAR, Unique)
    o   parent_tag_id (Nullable, FK → Tags)
10. Question_TagMap
    o   tagmap_id (PK, UUID)
    o   question_id (FK → Questions)
    o   tag_id (FK → Tags) 
11. AssessmentGroups
    o   group_id (PK, UUID)
    o   group_name (VARCHAR)
    o   created_by (FK → Users, refers to the instructor/admin)
    o   created_at (TIMESTAMP)
12. GroupMembers
    o   group_member_id (PK, UUID)
    o   group_id (FK → AssessmentGroups)
    o   user_id (FK → Users)
    o   joined_at (TIMESTAMP)
13. GroupAssessments
    o   group_assessment_id (PK, UUID)
    o   group_id (FK → AssessmentGroups)
    o   skill_id (FK → Skills)
    o   start_time (TIMESTAMP)
    o   end_time (TIMESTAMP)
    o   status (Completed, In Progress)
14. GroupResponses
    o   group_response_id (PK, UUID)
    o   group_assessment_id (FK → GroupAssessments)
    o   user_id (FK → Users)
    o   question_id (FK → Questions)
    o   user_answer (JSON)
    o   is_correct (BOOLEAN)
    o   time_taken
15. GroupPerformance
    o   group_performance_id (PK, UUID)
    o   group_assessment_id (FK → GroupAssessments)
    o   average_score (FLOAT)
    o   highest_score (FLOAT)
    o   lowest_score (FLOAT)
    o   completion_rate (Percentage of members who completed the test)
16.  GroupInsights
    o   group_insight_id (PK, UUID)
    o   group_assessment_id (FK → GroupAssessments)
    o   generated_on (TIMESTAMP)
    o   insight_data (JSON)
17. GroupComparativeInsights
    o   group_comparative_insight_id (PK, UUID)
    o   group_id (FK → AssessmentGroups)
    o   skill_id (FK → Skills)
    o   generated_on (TIMESTAMP)
    o   comparison_data (JSON)
18. GroupRankings
    o   ranking_id (PK, UUID)
    o   group_assessment_id (FK → GroupAssessments)
    o   user_id (FK → Users)
    o   score (FLOAT)
    o   rank_position
    o   time_taken
